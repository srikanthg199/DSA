DEPTH FIRST TRAVERSAL
recursively
// Pseudo code
DFS (vertex):
    if vertex is empty
        return (this is base case)
    add vertex to results list
    mark vertex as visited
    for each neighbor in vertex's neighbors:
        if neighbor is not visited:
            recursively call DFS on neighbor

The function should accept a starting node
Create a list to store the end result, to be returned at the very end
Create an object to store visited vertices
Create a helper function which accepts a vertex
The helper function should return early if the vertex is empty
The helper function should place the vertex it accepts into the
visited object and push that vertex into the result array.
Loop over all of the values in the adjacencyList for that vertex
If any of those values have not been visited, recursively invoke the
helper function with that vertex


DEPTH FIRST TRAVERSAL
Iterative
• The function should accept a starting node
• Create a stack to help use keep track of vertices (use a list/array)
• Create a list to store the end result, to be returned at the very end
• Create an object to store visited vertices
• Add the starting vertex to the stack, and mark it visited
• While the stack has something in it:
    ■ Pop the next vertex from the stack
    ■ If that vertex hasn't been visited yet:
        ○ Mark it as visited
        ○ Add it to the result list
        ○ Push all of its neighbors into the stack
• Return the result array.


Dijkstra Algorithm:
is an algorithm for finding the shortest paths between nodes in a weighted graph.

Dijkstra's Pseudocode:
• This function should accept a starting and ending vertex
• Create an object (we'll call it distances) and set each key to be every vertex in
    the adjacency list with a value of infinity, except for the starting vertex which
    should have a value of 0.
• After setting a value in the distances object, add each vertex with a priority of
    Infinity to the priority queue, except the starting vertex, which should have a
    priority of 0 because that's where we begin.
• Create another object called previous and set each key to be every vertex in
    adjacency list with a value of null
• Start looping as long as there is anything in the priority queue
    ■ dequeue a vertex from the priority queue
    ■ If that vertex is the same as the ending vertex - we are done!
    ■ Otherwise loop through each value in the adjacency list at that vertex
        ■ Calculate the distance to that vertex from the starting vertex
        ■ if the distance is less than what is currently stored in our distances
            object
        ■ update the distances object with new lower distance
        ■ update the previous object to contain that vertex
        ■ enqueue the vertex with the total distance from the start node